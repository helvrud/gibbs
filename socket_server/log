INFO:Client:Connected to server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:Got request from server
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.partDEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:('127.0.0.1', 57208) has 31
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:Non-pickable data
DEBUG:Server:recv from ('127.0.0.1', 57208)
 data:3804627942622.9927
art.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 1), ('pos', (1.9487741698649852, 4.112365176299263, 4.883910143922179)), ('_id', 1), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 2), ('pos', (3.478983278756307, 0.416609978787581, 7.508579583015546)), ('_id', 2), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 3), ('pos', (3.3261480027065615, 9.711340400912114, 5.152862876737373)), ('_id', 3), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 4), ('pos', (4.370605732325266, 6.414879181589609, 6.6561326907209875)), ('_id', 4), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 5), ('pos', (3.3523554268825375, 6.900379066674825, 2.073637612301147)), ('_id', 5), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 6), ('pos', (3.080504177132765, 1.1217871163866722, 6.052167020976027)), ('_id', 6), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 7), ('pos', (9.398033600124332, 7.646245118446796, 4.34736544091137)), ('_id', 7), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 8), ('pos', (4.84176330574272, 1.314703644094769, 5.75190798934868)), ('_id', 8), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 9), ('pos', (7.548348578990466, 0.09659050806102853, 4.927849536707352)), ('_id', 9), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 10), ('pos', (4.701883931508749, 3.0446870221759106, 9.62363262555065)), ('_id', 10), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 11), ('pos', (6.687134468124796, 6.470303923793449, 9.955900605193463)), ('_id', 11), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 12), ('pos', (6.62248041318796, 6.514315892791297, 8.248274106826091)), ('_id', 12), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 13), ('pos', (6.91634305193598, 8.655330949050304, 5.388415215574238)), ('_id', 13), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 14), ('pos', (3.470749068318406, 7.845563517687168, 0.2750572420130959)), ('_id', 14), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 15), ('pos', (5.482764088791253, 6.149540665894371, 9.528721773351046)), ('_id', 15), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 16), ('pos', (7.522793171288031, 0.6114058061799255, 3.9668453587447408)), ('_id', 16), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 17), ('pos', (9.446569709922999, 9.941739551643838, 8.692142431154695)), ('_id', 17), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 18), ('pos', (8.758697210713029, 1.2757929748533436, 3.624736635833079)), ('_id', 18), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 19), ('pos', (0.07658193588190088, 4.330030976966411, 5.09562190196602)), ('_id', 19), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 20), ('pos', (0.6987032471211918, 5.992152840856519, 9.224579568919943)), ('_id', 20), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 21), ('pos', (3.2160634709857714, 5.965316177184336, 6.28871768458792)), ('_id', 21), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 22), ('pos', (4.114181656793915, 6.038044772533453, 3.929397431374012)), ('_id', 22), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 23), ('pos', (6.846997478651671, 7.826487878061824, 4.086471368684354)), ('_id', 23), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 24), ('pos', (9.669254821833986, 0.16344094689194177, 9.515923050773248)), ('_id', 24), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 25), ('pos', (7.493904497977871, 2.185201811748466, 8.331036418277398)), ('_id', 25), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 26), ('pos', (1.288081611859242, 0.5901039733790214, 2.8442346258169273)), ('_id', 26), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 27), ('pos', (4.419745333995838, 3.5130670627872194, 6.2235388444448345)), ('_id', 27), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 28), ('pos', (5.538521530560271, 3.519821214573615, 9.638027982029199)), ('_id', 28), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 29), ('pos', (5.282796792908789, 9.167282477787476, 1.1821525537583766)), ('_id', 29), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 30), ('pos', (8.354464344792092, 1.2725117145283693, 5.736748927370504)), ('_id', 30), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 31), ('pos', (3.5456676388171426, 5.762691541603355, 2.791413184846906)), ('_id', 31), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 32), ('pos', (7.8359212554357525, 5.938412334789689, 8.380308480902285)), ('_id', 32), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 33), ('pos', (5.996466668266933, 8.397432562294044, 2.8687199748466066)), ('_id', 33), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 34), ('pos', (3.6325414314954676, 7.6866858979347095, 6.755909565300939)), ('_id', 34), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 35), ('pos', (2.400317509065617, 5.988034614109709, 2.3923313235862684)), ('_id', 35), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 36), ('pos', (8.85308091352553, 0.3529738407912131, 8.25176149054037)), ('_id', 36), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 37), ('pos', (2.0695435784042457, 7.1997432727127535, 1.5467081274431849)), ('_id', 37), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 38), ('pos', (8.906260539881076, 7.17631411435034, 4.459230719732155)), ('_id', 38), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 39), ('pos', (3.1971158661205945, 5.243841183993147, 0.7325172219009002)), ('_id', 39), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 40), ('pos', (7.64584430420717, 3.6938197788215597, 3.0875978991522226)), ('_id', 40), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 41), ('pos', (5.703154085820048, 5.825914048247199, 4.889013087936648)), ('_id', 41), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 42), ('pos', (3.157084849371853, 4.4127975573004665, 4.039020246953804)), ('_id', 42), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 43), ('pos', (0.8028809312807028, 1.8527546687705077, 5.591334962102872)), ('_id', 43), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 44), ('pos', (3.1175398359326034, 7.244269262281434, 5.787477977477251)), ('_id', 44), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 45), ('pos', (2.0544787553726707, 2.8625547670174556, 1.8491823949631614)), ('_id', 45), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 46), ('pos', (7.131483813863842, 1.4920315339847867, 4.271429184781167)), ('_id', 46), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 47), ('pos', (3.0125696554346924, 3.2819936397265828, 2.7073684900027803)), ('_id', 47), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 48), ('pos', (1.6563844186957621, 7.974615936669464, 6.598897485240797)), ('_id', 48), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 49), ('pos', (3.5148894847346766, 1.2790890506776942, 2.4576492448936715)), ('_id', 49), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 50), ('pos', (6.702343912957115, 7.864636733780475, 3.8322279594048814)), ('_id', 50), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 51), ('pos', (0.8186268048137213, 6.084635477380224, 1.7993093895929047)), ('_id', 51), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 52), ('pos', (1.857943629625819, 3.9399736887448245, 0.329893708652681)), ('_id', 52), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 53), ('pos', (7.267901504747876, 8.516961020673591, 9.457373770601658)), ('_id', 53), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 54), ('pos', (8.866179528697161, 8.516604342412892, 1.5592201803243888)), ('_id', 54), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 55), ('pos', (1.688980076811153, 6.664509943862763, 6.482766010599875)), ('_id', 55), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 56), ('pos', (5.403933314719462, 8.762193636781522, 0.07742840952478125)), ('_id', 56), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 57), ('pos', (0.753389534818456, 6.607530882107219, 0.027347818597117657)), ('_id', 57), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 58), ('pos', (6.674992802333147, 3.8529199917675996, 1.3371287154614853)), ('_id', 58), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 59), ('pos', (4.945711741667777, 2.8530959398410625, 5.055292107378642)), ('_id', 59), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 60), ('pos', (5.833586963630753, 1.1027873449250103, 1.9055213928291537)), ('_id', 60), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 61), ('pos', (2.9947686557797413, 4.399558310262131, 2.427410335071892)), ('_id', 61), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 62), ('pos', (7.020419306653546, 1.4523364044491494, 7.974836523894989)), ('_id', 62), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 63), ('pos', (7.428914023573, 5.749198385116351, 9.082353571875146)), ('_id', 63), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 64), ('pos', (0.7394829676683723, 1.7540711324785419, 3.424669110588996)), ('_id', 64), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 65), ('pos', (1.4909333979060624, 1.3955775497229983, 6.279001649276966)), ('_id', 65), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 66), ('pos', (2.71260013116406, 0.9793850099273993, 0.9227374667688326)), ('_id', 66), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 67), ('pos', (1.8985550731497325, 7.723323267444664, 5.86611448579424)), ('_id', 67), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))']
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 68), ('pos', (4.928898539128537, 3.4671175317326544, 5.30462834202095)), ('_id', 68), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:Got request from server
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 69), ('pos', (4.648275564445248, 3.9746106985579144, 7.711437296357322)), ('_id', 69), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 70), ('pos', (3.859256735440779, 0.9136846148400501, 3.6162294708871534)), ('_id', 70), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 71), ('pos', (3.1573418374994313, 5.922772450678373, 9.837155935684619)), ('_id', 71), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 72), ('pos', (9.360756646137192, 3.353479475790836, 6.625556910233462)), ('_id', 72), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 73), ('pos', (1.6534653487051176, 6.598389304963615, 6.416053364134507)), ('_id', 73), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 74), ('pos', (6.080852121215279, 5.1633829139837495, 9.896497156678901)), ('_id', 74), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 75), ('pos', (6.552823408485633, 3.929651760887044, 8.193195667847384)), ('_id', 75), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 76), ('pos', (5.90093231105887, 9.848042796204226, 2.711120015553552)), ('_id', 76), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 77), ('pos', (0.1978897465338736, 2.7219778719626553, 5.732700957270371)), ('_id', 77), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 78), ('pos', (5.9190100565405785, 1.5905050847089064, 2.1776058215560665)), ('_id', 78), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 79), ('pos', (7.083997571517678, 8.189782984266202, 9.326844113342316)), ('_id', 79), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 80), ('pos', (5.512786990433659, 1.497153173873007, 5.152988607575497)), ('_id', 80), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 81), ('pos', (0.6508956511302233, 2.2798151252194474, 5.46624206954235)), ('_id', 81), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 82), ('pos', (9.074152311834991, 8.095672214028877, 7.5848067596929365)), ('_id', 82), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 83), ('pos', (3.3703779957901103, 9.299360742092501, 8.205096828048937)), ('_id', 83), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 84), ('pos', (1.2772418569129307, 9.217894368628427, 4.451458448417362)), ('_id', 84), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 85), ('pos', (9.281508225850764, 8.181692469149004, 1.1793401576871054)), ('_id', 85), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 86), ('pos', (9.669037430934521, 0.7091808272620592, 9.900363896859808)), ('_id', 86), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 87), ('pos', (4.465697023872211, 8.059124666269232, 2.369833240565086)), ('_id', 87), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 88), ('pos', (0.08889434325494827, 3.8932691202833403, 3.8145782909718493)), ('_id', 88), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 89), ('pos', (4.144323549427538, 4.172905871397964, 3.3871326328297693)), ('_id', 89), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 90), ('pos', (6.354308569441077, 4.403567007561203, 1.6912677434999412)), ('_id', 90), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 91), ('pos', (0.8882006352218197, 0.10511070963673874, 4.344985760754766)), ('_id', 91), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 92), ('pos', (1.3055782316369702, 5.653315192686388, 7.421168466723942)), ('_id', 92), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 93), ('pos', (1.3299178651040877, 5.551951365273187, 9.8812572475894)), ('_id', 93), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 94), ('pos', (3.2301567636900352, 7.6141131172156395, 7.000515162851409)), ('_id', 94), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 95), ('pos', (3.45726653292365, 1.472575462431791, 9.069186481137326)), ('_id', 95), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 96), ('pos', (5.048760911489751, 4.677124500868638, 1.03189776761205)), ('_id', 96), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 97), ('pos', (9.93074923179375, 9.666328696263317, 5.226628959897099)), ('_id', 97), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', 'self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 98), ('pos', (4.433000240867182, 1.126151940729414, 4.254508283712321)), ('_id', 98), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:['self.system.part.add(pos=self.system.box_l * np.random.random(3))', "self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.part.add(pos=self.system.box_l * np.random.random(3)))
DEBUG:Client:Request processed, result send to host
 ParticleHandle([('id', 99), ('pos', (6.29063405227268, 8.198082907411592, 2.381327354370757)), ('_id', 99), ('bonds', ()), ('dip', (0.0, 0.0, 0.0)), ('dipm', 0.0), ('director', (0.0, 0.0, 1.0)), ('exclusions', ()), ('ext_force', (0.0, 0.0, 0.0)), ('ext_torque', (0.0, 0.0, 0.0)), ('f', (0.0, 0.0, 0.0)), ('fix', (0, 0, 0)), ('gamma', (-1.0, -1.0, -1.0)), ('gamma_rot', (-1.0, -1.0, -1.0)), ('image_box', (0, 0, 0)), ('mass', 1.0), ('mol_id', 0), ('node', 0), ('omega_body', (0.0, 0.0, 0.0)), ('omega_lab', (0.0, 0.0, 0.0)), ('q', 0.0), ('quat', (1.0, 0.0, 0.0, 0.0)), ('rinertia', (1.0, 1.0, 1.0)), ('rotation', (0, 0, 0)), ('swimming', {'v_swim': 0.0, 'f_swim': 0.0, 'mode': 'N/A', 'dipole_length': 0.0}), ('temp', -1.0), ('torque_lab', (0.0, 0.0, 0.0)), ('type', 0), ('v', (0.0, 0.0, 0.0)), ('virtual', False), ('vs_quat', array([0., 0., 0., 0.])), ('vs_relative', (0, 0.0, array([0., 0., 0., 0.])))])
DEBUG:Client:["self.system.analysis.energy()['total']"]
DEBUG:Client:eval(self.system.analysis.energy()['total'])
DEBUG:Client:Request processed, result send to host
 3804627942622.9927
